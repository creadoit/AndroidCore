ext {
    versionName = '0.1'
}
apply from: "${project.rootDir}/dependencies/utils.gradle"

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: "com.jfrog.artifactory"
apply plugin: 'maven-publish'
apply plugin: 'com.getkeepsafe.dexcount'

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode commitCount()
        versionName simpleReleaseVersionName()
    }

    dexOptions {
        javaMaxHeapSize "4g"
        maxProcessCount 8
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libs.kotlinJre8

    implementation libs.multidex

    implementation libs.appcompat
    implementation libs.constraintLayout

    compileOnly libs.rx2java
    compileOnly libs.rx2Android

    implementation libs.butterknife

    implementation libs.deviceInfo

    implementation libs.connectionBuddy
    implementation libs.googlePlayForceUpdate
    implementation libs.permissionDispatcher
    kapt libs.permissionDispatcherProcessor
    implementation libs.timeBomb

    implementation libs.recyclerview
    implementation libs.recyclerViewPresenter

    implementation(libs.crashlytics) {
        transitive = true
    }

    implementation(libs.materialdrawer) {
        transitive = true
    }

    implementation libs.joda

    implementation libs.markdownview

    implementation libs.rxmarkdown

    implementation libs.processPhoenix

    compileOnly libs.logger

    implementation libs.playServicesAuth
    implementation libs.firebaseMessaging
    implementation libs.firebaseJobdispatcher

    implementation libs.lifecycleExtensions
    implementation libs.lifecycleCommonJava8
    implementation libs.lifecycleRactiveStreams
}

// region kapt

kapt {
    useBuildCache = true
}

// endregion

// region coroutines

kotlin {
    experimental {
        coroutines 'enable'
    }
}

// endregion

static def escape(Object value) {
    return "\"$value\""
}

// endregion

// region javadoc

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task generateJavadocsJar(type: Jar) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}

generateJavadocsJar.dependsOn generateJavadocs

artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

// endregion

task('printEnvironmentTask') {
    println(System.getenv())
}

task('generateEnvironmentLogTask') {
    // generateEnvironmentLog() for debugging purposes
}

task('generateChangelogTask') {
    generateChangelog()
}

task('generateReleaseNotesTask') {
    generateReleaseNotes()
}

task copyReadme(type: Copy) {
    from "${project.rootDir}/README.md"
    into "${project.rootDir}/app/src/main/assets"
}

preBuild.dependsOn printEnvironmentTask
preBuild.dependsOn generateChangelogTask
preBuild.dependsOn generateReleaseNotesTask
preBuild.dependsOn copyReadme

apply from: rootProject.file('bintray-config.gradle')


artifactory {
    contextUrl = 'https://oss.jfrog.org'
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    publish {
        repository {
            repoKey = 'oss-snapshot-local' //The Artifactory repository key to publish to
            //when using oss.jfrog.org the credentials are from Bintray. For local build we expect them to be found in
            //~/.gradle/gradle.properties, otherwise to be set in the build server
            username = developerUser
            password = developerApi
        }
        defaults {
            publications('mavenJava')
        }
    }
    if (System.properties['https.proxyHost']) {
        clientConfig.proxy.host = System.properties['https.proxyHost']
        clientConfig.proxy.port = System.properties['https.proxyPort'].toInteger()
    }
//    clientConfig.info.setBuildName('new-strange-name')
//    clientConfig.info.setBuildNumber('' + new java.util.Random(System.currentTimeMillis()).nextInt(20000))
//    clientConfig.timeout = 600
}