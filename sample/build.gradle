apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

ext {
    versionName = '1.0'
    VSC = 'https://git.exozet.com/exozet-mobile/android-common-utils.git'
}

android {
    compileSdkVersion compileSdkVer
    buildToolsVersion buildToolsVer

    defaultConfig {
        applicationId "com.exozet.commonutils.sample"
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode commitCount()
        versionName versionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        buildConfigField "String", "SIMPLE_VERSION_NAME", escape(simpleReleaseVersionName())
        buildConfigField "String", "CANONICAL_VERSION_NAME", escape(canonicalReleaseVersionName())
        buildConfigField "String", "COMMIT_HASH", escape(commitHash())
        buildConfigField "String", "BRANCH", escape(branchNameByGit())
        buildConfigField "String", "BUILD_DATE", escape(new Date().getTime())
        buildConfigField "String", "VSC", escape(VSC)

    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            pseudoLocalesEnabled false
            debuggable true
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            initWith(buildTypes.debug)
            applicationIdSuffix ""
            signingConfig signingConfigs.release
            debuggable false
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libs.kotlinJre8
    implementation project(':core')

    implementation libs.multidex
    implementation libs.appcompat
    implementation libs.constraintLayout
    implementation libs.recyclerview
    implementation libs.design
    implementation libs.butterknife
    kapt libs.butterknifeCompiler
    implementation libs.commonUtils
    implementation libs.deviceInfo
    implementation libs.connectionBuddy
    implementation libs.joda

    implementation libs.permissionDispatcher
    kapt libs.permissionDispatcherProcessor

    implementation(libs.crashlytics) {
        transitive = true
    }
    implementation(libs.materialdrawer) {
        transitive = true
    }

    implementation libs.markdownview
    implementation libs.rxmarkdown

    testImplementation testLibs.junit
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}

configurations.all {

    resolutionStrategy.force libs.multidex
    resolutionStrategy.force libs.supportAnnotations
    resolutionStrategy.force libs.supportV4
    resolutionStrategy.force libs.supportV13
    resolutionStrategy.force libs.appcompat
    resolutionStrategy.force libs.cardview
    resolutionStrategy.force libs.recyclerview
    resolutionStrategy.force libs.design
    resolutionStrategy.force libs.butterknife
    resolutionStrategy.force libs.butterknifeCompiler
    resolutionStrategy.force libs.playServicesMaps
    resolutionStrategy.force libs.playServicesLocation
    resolutionStrategy.force libs.playServicesAnalytics
    resolutionStrategy.force libs.playServicesGcm
    resolutionStrategy.force libs.guava
    resolutionStrategy.force libs.okhttp3
    resolutionStrategy.force libs.okhttp3LoggingInterceptor
    resolutionStrategy.force libs.javawriter
}

def generateReleaseNotes() {
    final String filePath = "${project.rootDir}/RELEASE.md"

    description = "Generate release notes. [" + filePath + "]"
    println(description)

    final def env = System.getenv()
    env.each { final key, final value -> println "$key = $value"; }

    final def output = new File(filePath)

    def notes = 'Internal Release.'

    output.write(notes)

    println new File(filePath).getText('UTF-8')
}

// endregion

// region changelog

//noinspection GroovyAssignabilityCheck
def generateChangelog() {
    final String filePath = "${project.rootDir}/sample/src/main/assets/CHANGELOG.md"

    description = "Generate Changelog. [" + filePath + "]"
    println(description)

    def log = gitLog()

    StringBuilder builder = new StringBuilder();

    Scanner scanner = new Scanner(log);
    while (scanner.hasNextLine()) {
        def line = scanner.nextLine()
        def commit = line.subSequence(1, line.length() - 1)
        // 0e9c204 message
        def hash = commit.subSequence(0, 7)
        def message = commit.subSequence(8, commit.length())
        builder.append("<a href=\"").append(VSC).append("commits/").append(hash).append("\">#").append(hash).append("</a> ")
                .append(message).append("\r\n")
                .append("\r\n")
    }

    final def output = new File(filePath)
    output.write(builder.toString())

    println new File(filePath).getText('UTF-8')
}

// endregion

// region settings

// https://github.com/android/platform_packages_apps_settings/blob/master/AndroidManifest.xml
//noinspection GroovyAssignabilityCheck
task settings() << {
    description = 'adb shell am start -a android.settings.SETTINGS'
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        executable android.getAdbExe().toString()
        args = ['shell', 'am', 'start', '-a', 'android.settings.SETTINGS']
        standardOutput = stdout;
    }
    final def result = stdout.toString().trim();

    println(result)
}

//noinspection GroovyAssignabilityCheck
task devSettings() << {
    description = 'adb shell am start -n com.android.settings/.DevelopmentSettings'
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        executable android.getAdbExe().toString()
        args = ['shell', 'am', 'start', '-n', 'com.android.settings/.DevelopmentSettings']
        standardOutput = stdout;
    }
    final def result = stdout.toString().trim();
    println(result)
}

// endregion

// region versioning

//noinspection GroovyAssignabilityCheck
task printCommitCount() << {
    commitCount()
}

//noinspection GroovyAssignabilityCheck
task printBranchname() << {
    branchName()
}

//noinspection GroovyAssignabilityCheck
task printGitLog() << {
    gitLog()
}

def gitLog() {
    description = "git log --pretty=format:'%h %s'"
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', "--pretty=format:'%h %s'"
        standardOutput = stdout
    }

    return stdout.toString().trim();
}

def commitHash() {
    description = "git log -n 1 --format='%h'"
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-n', '1', "--format='%h'"
        standardOutput = stdout
    }
    println("Git Hash" + stdout.toString())
    return stdout.toString().trim().replaceAll('\'', '')
}

def commitCount() {
    final def stdout = new ByteArrayOutputStream()
    description = "git rev-list --full-history --all"
    println(description)
    exec {
        commandLine 'git', 'rev-list', '--full-history', '--all'
        standardOutput = stdout
    }
    final String output = stdout.toString();
    final List<String> commits = output.split("\n");
    println("Version Code: " + commits.size())
    return commits.size();
}

def simpleReleaseVersionName() {
    description = "Creating release version name. Format: major.minor.build"
    println(description)

    final def buildNumber = buildNumberByCI()
    def releaseName = branchName()
    // remove 'origin' in from branch name
    if (releaseName != null && releaseName.contains("origin/"))
        releaseName = releaseName.replace("origin/", "");

    if (releaseName.contains("release"))
        releaseName = releaseName.replace("release/", "");
    else
        releaseName = versionName

    if (buildNumber != null)
        releaseName += "." + buildNumber
    else
        releaseName += "." + 0

    println("Version Name: " + releaseName)
    return releaseName
}

def canonicalReleaseVersionName() {
    description = "Creating release version name. Format: branch/major.minor.build-commithash"
    println(description)
    final def buildNumber = buildNumberByCI()
    def releaseName = branchName()

    // remove 'origin' in from branch name
    if (releaseName != null && releaseName.contains("origin/"))
        releaseName = releaseName.replace("origin/", "");

    if (!releaseName.contains("release"))
        releaseName += "/" + versionName

    if (buildNumber != null) {
        releaseName += "." + buildNumber + "-"
    } else {
        releaseName += ".0-"
    }

    releaseName += commitHash()
    println('Version Name: ' + releaseName)
    return releaseName
}

def buildNumberByCI() {
    description = 'Getting build number from Jenkins or Travis.'
    println(description)
    final def env = System.getenv()
    if (env.BITRISE_BUILD_NUMBER != null)
        return Integer.parseInt(env.BITRISE_BUILD_NUMBER)
    if (env.BUILD_NUMBER != null)
        return Integer.parseInt(env.BUILD_NUMBER)
    if (env.TRAVIS_BUILD_NUMBER != null)
        return Integer.parseInt(env.TRAVIS_BUILD_NUMBER)
    return 0;
}

def branchName() {
    description = 'Getting branch name from Jenkins or Travis or from git directly.'
    println(description)
    def branchName = branchNameByCI()
    if (branchName == null)
        branchName = branchNameByGit()
    return branchName;
}

def branchNameByCI() {
    description = 'Getting build number from Jenkins or Travis.'
    println(description)
    final def env = System.getenv()
    if (env.BITRISE_GIT_BRANCH != null)
        return env.BITRISE_GIT_BRANCH;
    if (env.GIT_BRANCH != null)
        return env.GIT_BRANCH
    if (env.TRAVIS_BRANCH != null)
        return env.TRAVIS_BRANCH
    return null
}

def branchNameByGit() {
    final def stdout = new ByteArrayOutputStream()
    description = 'git rev-parse --abbrev-ref HEAD'
    println(description)
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    final String output = stdout.toString().trim();
    println('Branch Name: ' + output)
    return output;
}

// endregion

// region misc

def escape(Object value) {
    return "\"$value\""
}

// endregion

// region copy readme

task copyReadme(type: Copy) {
    from '../README.md'
    into 'src/main/assets'
}

tasks.whenTaskAdded { final task ->
    if (task.name.startsWith('assemble')) {
        tasks.copyReadme.execute()
        generateChangelog()
    }
}

// endregion

// region multidex


