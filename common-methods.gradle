def commitCount() {
    final def stdout = new ByteArrayOutputStream()
    description = "git rev-list --full-history --all"
    println(description)
    exec {
        commandLine 'git', 'rev-list', '--full-history', '--all'
        standardOutput = stdout
    }
    final String output = stdout.toString();
    final List<String> commits = output.split("\n");
    println("Version Code: " + commits.size())
    return commits.size();
}


def simpleReleaseVersionName() {
    description = "Creating simple release version name. Format: major.minor.build"
    println(description)

    final def buildNumber = buildNumberByCI()
    def releaseName = branchName()
    // remove 'origin' in from branch name
    if (releaseName != null && releaseName.contains("origin/"))
        releaseName = releaseName.replace("origin/", "");

    if (releaseName.contains("release"))
        releaseName = releaseName.replace("release/", "");
    else
        releaseName = '0.0'

    if (buildNumber != null)
        releaseName += "." + buildNumber
    else
        releaseName += "." + 0

    println("Version Name: " + releaseName)
    return releaseName
}


def gitLog() {
    description = "git log --pretty=format:\"%h %s\""
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', "--pretty=format:\"%h %s\""
        standardOutput = stdout
    }

    return stdout.toString().trim();
}

def commitHash() {
    description = "git log -n 1 --format='%h'"
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-n', '1', "--format='%h'"
        standardOutput = stdout
    }
    println("Git Hash" + stdout.toString())
    return stdout.toString().trim().replaceAll('\'', '')
}


def canonicalReleaseVersionName() {
    description = "Creating canonical release version name. Format: branch/major.minor.build-commithash"
    println(description)
    final def buildNumber = buildNumberByCI()
    def releaseName = branchName()

    // remove 'origin' in from branch name
    if (releaseName != null && releaseName.contains("origin/"))
        releaseName = releaseName.replace("origin/", "");

    if (!releaseName.contains("release"))
        releaseName += "/0.0"

    if (buildNumber != null) {
        releaseName += "." + buildNumber + "-"
    } else {
        releaseName += ".0-"
    }

    releaseName += commitHash()
    println("Version Name: " + releaseName)
    return releaseName
}

def buildNumberByCI() {
    description = "Getting build number from Jenkins or Travis."
    println(description)
    final def env = System.getenv()
    if (env.BITRISE_BUILD_NUMBER != null)
        return Integer.parseInt(env.BITRISE_BUILD_NUMBER)
    if (env.BUILD_NUMBER != null)
        return Integer.parseInt(env.BUILD_NUMBER)
    if (env.TRAVIS_BUILD_NUMBER != null)
        return Integer.parseInt(env.TRAVIS_BUILD_NUMBER)
    return 0;
}

def branchName() {
    description = "Getting branch name from Jenkins or Travis or from git directly."
    println(description)
    def branchName = branchNameByCI()
    if (branchName == null)
        branchName = branchNameByGit()
    return branchName;
}

def branchNameByCI() {
    description = "Getting build number from Jenkins or Travis."
    println(description)
    final def env = System.getenv()
    if (env.BITRISE_GIT_BRANCH != null)
        return env.BITRISE_GIT_BRANCH;
    if (env.GIT_BRANCH != null)
        return env.GIT_BRANCH
    if (env.TRAVIS_BRANCH != null)
        return env.TRAVIS_BRANCH
    return null
}

def branchNameByGit() {
    final def stdout = new ByteArrayOutputStream()
    description = "git rev-parse --abbrev-ref HEAD"
    println(description)
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    final String output = stdout.toString().trim();
    println("Branch Name: " + output)
    return output;
}

ext {
    commitCount = this.&commitCount
    simpleReleaseVersionName = this.&simpleReleaseVersionName
    gitLog = this.&gitLog
    commitHash = this.&commitHash
    canonicalReleaseVersionName = this.&canonicalReleaseVersionName
    buildNumberByCI = this.&buildNumberByCI
    branchName = this.&branchName
    branchNameByCI = this.&branchNameByCI
    branchNameByGit = this.&branchNameByGit
}